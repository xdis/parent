package com.zyxy.common.mapper;

import com.zyxy.common.domain.CaseInfo;
import com.zyxy.common.domain.CaseInfoExample;

import java.util.List;

import com.zyxy.common.dto.*;
import com.zyxy.common.vo.*;
import org.apache.ibatis.annotations.Param;

public interface CaseInfoMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int countByExample(CaseInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int deleteByExample(CaseInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int deleteByPrimaryKey(String id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int insert(CaseInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int insertSelective(CaseInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	List<CaseInfo> selectByExample(CaseInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	CaseInfo selectByPrimaryKey(String id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int updateByExampleSelective(@Param("record") CaseInfo record,
			@Param("example") CaseInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int updateByExample(@Param("record") CaseInfo record,
			@Param("example") CaseInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int updateByPrimaryKeySelective(CaseInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table case_info
	 * @mbggenerated
	 */
	int updateByPrimaryKey(CaseInfo record);

	/**
     * 仲裁员查询案件列表
     * @param arbitratorCaseListDTO dto
     * @param arbitratorId 仲裁员Id
     * @return
     */
    List<ArbitratorCaseListVO> queryCaseList(@Param("dto") ArbitratorCaseListDTO arbitratorCaseListDTO, @Param("arbitratorId") String arbitratorId);

    /**
     * 查询案件基本信息
     * @param caseId 案件Id
     * @param requestFlag 0-正请求，1-反请求
     * @return 案件基本信息
     */
    ArbitratorCaseBaseInfoVO queryCaseBaseInfo(@Param("caseId") String caseId,@Param("requestFlag") String requestFlag);


    /**
     * 仲裁委查询案件基本信息
     * @param caseId 案件Id
     * @param requestFlag 0-正请求，1-反请求
     * @return 案件基本信息
     */
    ArbitratorCaseBaseInfoVO queryArbitrationCaseInfo(@Param("caseId") String caseId,@Param("requestFlag") String requestFlag);

    /**
     * 仲裁委查询案件列表
     * @param formData
     * @return
     */
    List<ArbitrationCaseListVO> queryArbitrationCaseList(@Param("dto") ArbitrationCaseListDTO formData);

    /**
     * 查询案件请求答辩信息
     * @param caseId 案件Id
     * @param requestFlag 0-正请求，1-反请求
     * @return 案件基本信息
     */
    ArbitratorCaseReplyInfoVO queryCaseReplyInfo(@Param("caseId") String caseId, @Param("requestFlag") String requestFlag);
    
    /**
     * 查询请求答辩信息
     * @param caseId 案件Id
     * @param requestFlag 0-正请求，1-反请求
     * @param rejonTyep 0-本请求 1-变更请求
     * @return 案件基本信息
     */
    List<ArbitratorCaseReplyInfoVO> queryCaseDebateInfo(@Param("caseId") String caseId, @Param("requestFlag") String requestFlag,@Param("rejonTyep") String rejonTyep);

    /**
     * 根据案件Id查询案件流程信息
     * @param caseId
     * @return
     */
    CaseFlowVO queryCaseFlowByCaseId(String caseId);

    /**
     * 申请人列表
     * @param formData
     * @return
     */
    List<LitigantCaseListVO> selectProposerCaseList(LitigantCaseListDTO formData);
    /**
     * 被申请人列表
     * @param formData
     * @return
     */
    List<LitigantCaseListVO> selectDefendantCaseList(LitigantCaseListDTO formData);
    /**
     * 代理人列表
     * @param formData
     * @return
     */
    List<LitigantCaseListVO> selectAgentCaseList(LitigantCaseListDTO formData);


    /**
     * 查询案件请求答辩书信息
     * @param caseId 案件Id
     * @param requestFlag 0-正请求，1-反请求
     * @return 案件请求答辩书信息
     */
    CaseWithdrawDecisionVO queryWithdrawDecisionDocByCaseIdAndRequestFlag(@Param("caseId") String caseId,@Param("requestFlag") String requestFlag);

    /**
     * PC端查询仲裁委案件列表
     * @param formData
     * @return
     */
    List<CaseListVO> queryArbiCaseList(CaseListDTO formData);
    /**
     * 仲裁委查询案件审批记录
     * @param caseId 案件Id
     * @return 案件审批记录表
     * */
    List<ApproveRecordVO> selectApproveRecordList(String caseId);


    /**
     * 根据案件ID查询案件相关人员userId
     * @param caseId
     * @return
     */
    LitigantCaseInfoValidVO selectLitigantUserIdByCaseId(String caseId);

    /**
     * 当事人--案件信息
     * @param caseId
     * @return
     */
    LitigantCaseBaseInfoVO selectLitigantCaseInfoByCaseId(String caseId);

    /**
     * 当事人--反请求信息
     * @param caseId
     * @return
     */
    LitigantCaseBaseInfoVO selectLitigantBackRequestInfoByCaseId(String caseId);

    /**
     * 查询用户职务
     * @param userId 用户id
     * @return
     */
	String queryDutiesById(String userId);

	/**
	 * 查询证据目录
	 * @param caseId 案件id
	 * @param requestFlag 请求标志
	 * @return
	 */
	List<EvidenceVO> queryEvdences(@Param("caseId")String caseId, @Param("requestFlag")String requestFlag,@Param("matType")String matType);

	/**
	 * 查询审批记录
	 * @param caseId 案件id
	 * @param approveType 审批类型
	 * @return
	 */
	List<ApproveRecordVO> queryApproveRecords(@Param("caseId")String caseId,@Param("approveType")String approveType);

    /**
	 * 查询案件金额相关信息
	 * @param caseId 案件id
	 * @return
	 */
	CaseAmountVO queryCaseAmount(@Param("caseId")String caseId,@Param("requestFlag")String requestFlag);

    /**
	 * 判断caseId对应的案件是否存在
	 * @param caseId 案件id
	 * @return
	 */
	int caseExist(@Param("caseId")String caseId);

    /**
     * 查询案件公共信息
     * @param caseId 案件Id
     * @return
     */
    CaseCommBaseInfoVO queryCaseCommInfo(@Param("caseId")String caseId);

    /**
     * 查询案件公共进度信息
     *
     * @param caseId 案件Id
     * @return
     */
    CaseCommProgressInfoVO queryCaseCommProgressInfo(@Param("caseId") String caseId);


    /**
     * 查询财务模块列表
     * @return
     */
    List<FinanceVO> queryFinance(FincaceDTO formData);

    /**
     * 根据案件Id查询案件基本信息
     * @param caseInfo
     * @return
     */
    CaseInfo selectCaseInfoByCaseId(CaseInfo caseInfo);


    /**
     * 查询案件进展
     * @param caseId 案件id
     * @param requestFlag 请求标志
     * @return 案件进展列表
     */
    List<CaseProgressListVO> queryCaseProgress(@Param("caseId") String caseId, @Param("requestFlag") String requestFlag);

    /**
     * 查询草稿信息
     *
     * @param caseId 案件Id
     * @return 案件草稿信息
     */
    CaseApplyDraftVO queryCaseApplyDraft(String caseId);

    /**
     * 查询草稿信息中的证据
     *
     * @param caseId 案件Id
     * @return
     */
    List<CaseDraftEvidenceVO> queryCaseApplyDraftEvidence(String caseId);
    
    /**
     * 案件本请求
     * @param caseId
     * @return
     */
    RequestListVO selectCaseRequest(@Param("caseId") String caseId, @Param("litigantType") String litigantType);
    
    /**
     * 案件反请求查询
     * @param caseId
     * @return
     */
    RequestListVO selectCaseBackRequest(@Param("caseId") String caseId, @Param("litigantType") String litigantType);

    /**
     * 得到当前用户申请人信息
     *
     * @param userId
     * @return
     */
    CaseDefaultInfoVO queryCaseDefaultInfo(String userId);
    
    /**
     * 查询案件有效相关仲裁委人员职位姓名
     * @param caseId 案件id
     * @return 案件相关仲裁委人员职位姓名
     */
    List<CaseManagerVO> queryCaseArbiInfo(@Param("caseId")String caseId);
    
    /**
     * 查询文书头
     * @param caseId
     * @return
     */
    DocHeadVO selectDocHead(String caseId);
    
    /**
     * 查询请求id
     * @param caseId 案件id
     * @param requestFlag 请求标志
     * @return 请求id
     */
    String queryRequestId(@Param("caseId")String caseId,@Param("requestFlag")String requestFlag);
    
    /**
     * 将案由更新到案件表中
     * @param caseId 案件Id
     * @param caseTypeId 案由
     * @return
     */
    int updateCaseTypeId(@Param("caseId")String caseId,@Param("caseTypeId")String caseTypeId);

    /**
     * 验证案件与当事人
     * @param caseNo
     * @return
     */
    CaseLitigantValidVO selectCaseLitigantValidInfo(String caseNo);


    /**
     * 根据案件id查询出当事人信息
     * @param caseId
     * @return
     */
	LitigantInfoVO selectLitigantInfoByCaseId(@Param("caseId") String caseId);
	
	/**
     * 根据审批Id查询案件Id
     * @param approveId 审批Id
     * @return 案件Id
     */
    String queryCaseInfoCaseId(@Param("approveId") String approveId);
	
    /**
     * 通过请求id查询当事人信息
     * @param requestId 请求id
     * @return 当事人信息
     */
    CaseBaseInfoVO queryCaseBaseInfoByRequestId(String requestId);
}
